package platform

import (
	"bosh/settings"
	"bosh/system"
	"bytes"
	"text/template"
)

type ubuntu struct {
	fs        system.FileSystem
	cmdRunner system.CmdRunner
}

func newUbuntuPlatform(fs system.FileSystem, cmdRunner system.CmdRunner) (p ubuntu) {
	p.fs = fs
	p.cmdRunner = cmdRunner
	return
}

func (u ubuntu) SetupDhcp(networks settings.Networks) (err error) {
	dnsServers := []string{}
	dnsNetwork, found := networks.DefaultNetworkFor("dns")
	if found {
		for i := len(dnsNetwork.Dns) - 1; i >= 0; i-- {
			dnsServers = append(dnsServers, dnsNetwork.Dns[i])
		}
	}

	type dhcpConfigArg struct {
		DnsServers []string
	}

	buffer := bytes.NewBuffer([]byte{})
	t := template.Must(template.New("dhcp-config").Parse(DHCP_CONFIG_TEMPLATE))

	err = t.Execute(buffer, dhcpConfigArg{dnsServers})
	if err != nil {
		return
	}

	err = u.fs.WriteToFile("/etc/dhcp3/dhclient.conf", buffer.String())
	if err != nil {
		return
	}

	// Ignore errors here, just run the commands
	u.cmdRunner.RunCommand("pkill", "dhclient3")
	u.cmdRunner.RunCommand("/etc/init.d/networking", "restart")

	return
}

// DHCP Config file - /etc/dhcp3/dhclient.conf
const DHCP_CONFIG_TEMPLATE = `# Generated by bosh-agent

option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;

send host-name "<hostname>";

request subnet-mask, broadcast-address, time-offset, routers,
	domain-name, domain-name-servers, domain-search, host-name,
	netbios-name-servers, netbios-scope, interface-mtu,
	rfc3442-classless-static-routes, ntp-servers;

{{ range .DnsServers }}prepend domain-name-servers {{ . }};
{{ end }}
`
